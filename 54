#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_WARNINGS
#define SIZE 6

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>

/* Функции */
int** zapolnenie_matrix(int** matrix, int size);
int** zapolnenie_matrix_randomno(int** matrix, int size);
int one_or_null(int** matrix, int size);
int** replace_matrix(int** matrix, int size);
void print_matrix(int** matrix, int size);
void save_matrix_to_file(int** matrix, int size, const char* filename);
int** load_matrix_from_file(int size, const char* filename);
void bubble_sort(int* row, int size); // Функция сортировки пузырьком

int main()
{
    setlocale(LC_ALL, "RUS");
    srand(time(NULL));

    printf("*********************************************************************\n");
    printf("*          Курсовая работа:                                         *\n");
    printf("*          Тема: Реализация динамического многомерного массива      *\n");
    printf("*          Выполнил: Есаков М.Е                                     *\n");
    printf("*          Группа: бИД - 241                                        *\n");
    printf("*********************************************************************\n");

    /* Выделение памяти для матрицы */
    int** matrix = (int**)malloc(SIZE * sizeof(int*));
    if (matrix == NULL) {
        puts("Ошибка выделения памяти");
        return -1;
    }
    /* Проход в цикле по каждому указателю и выделение памяти для каждой строки */
    for (int i = 0; i < SIZE; i++) {
        matrix[i] = (int*)malloc(SIZE * sizeof(int));
        if (matrix[i] == NULL) {
            puts("Ошибка выделения памяти");
            return -1;
        }
    }

    /* Выбор пользователя */
    int option;
    do {
        printf("Здравствуйте! Данная программа позволяет преобразовывать матрицу, чтобы формировались квадраты из единиц в углах.\n");
        printf("------------------МЕНЮ--------------------\n");
        printf("Выберите способ инициализации матрицы 6x6:\n");
        printf("1. Ввести матрицу вручную\n");
        printf("2. Сгенерировать матрицу случайно\n");
        printf("3. Загрузить матрицу из файла\n");
        printf("4. Сохранить матрицу в файл\n");
        printf("5. Отсортировать матрицу по строкам\n");
        printf("6. Выход из программы\n");
        printf("------------------------------------------\n");
        printf("Ваш выбор: ");
        scanf("%d", &option);
        switch (option) {
            case 1:
                printf("Введите элементы матрицы 6x6 (0 или 1):\n");
                zapolnenie_matrix(matrix, SIZE);
                break;
            case 2:
                zapolnenie_matrix_randomno(matrix, SIZE);
                printf("Сгенерированная матрица:\n");
                print_matrix(matrix, SIZE);
                break;
            case 3:
                matrix = load_matrix_from_file(SIZE, "matrix.txt");
                if (matrix != NULL) {
                    printf("Загруженная матрица:\n");
                    print_matrix(matrix, SIZE);
                }
                break;
            case 4:
                save_matrix_to_file(matrix, SIZE, "matrix.txt");
                printf("Матрица сохранена в файл matrix.txt\n");
                break;
            case 5:
                for (int i = 0; i < SIZE; i++) {
                    bubble_sort(matrix[i], SIZE); // Сортируем каждую строку
                }
                printf("Отсортированная матрица:\n");
                print_matrix(matrix, SIZE);
                break;
            case 6:
                printf("Выход из программы\n");
                break;
            default:
                printf("Неверный выбор\n");
        }
        if (option != 6) {
            replace_matrix(matrix, SIZE);
            printf("Преобразованная матрица:\n");
            print_matrix(matrix, SIZE);
            if (one_or_null(matrix, SIZE) == 1) {
                printf("Квадрат из 4 единиц в левом верхнем углу сформировать невозможно\n");
            }
            if (one_or_null(matrix, SIZE) == 0) printf("Квадрат из 4 единиц в правом нижнем углу сформировать невозможно\n");
            }
        }
        printf("Хотите продолжить? (1 - Да, 0 - Нет): ");
        scanf("%d", &option);
    } while (option == 1);

    /* Освобождение памяти матрицы */
    for (int i = 0; i < SIZE; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

int** zapolnenie_matrix(int** matrix, int size)
{
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }
    return matrix;
}

int** zapolnenie_matrix_randomno(int** matrix, int size)
{
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            matrix[i][j] = rand() % 2;
        }
    }
    return matrix;
}

int one_or_null(int** matrix, int size)
{
    if (matrix[0][0] == 0 || matrix[0][1] == 0 || matrix[1][0] == 0 || matrix[1][1] == 0)
    {
        return 1;
    }
    if (matrix[4][4] == 0 || matrix[4][5] == 0 || matrix[5][4] == 0 || matrix[5][5] == 0)
    {
        return 0;
    }
    return -1; // Возвращаем -1, если оба квадрата могут быть сформированы
}

int** replace_matrix(int** matrix, int size)
{
    int ones_needed = 4;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            if (matrix[i][j] == 0)
            {
                for (int k = 0; k < size; k++)
                {
                    for (int l = 0; l < size; l++)
                    {
                        if (matrix[k][l] == 1)
                        {
                            int temp = matrix[i][j];
                            matrix[i][j] = matrix[k][l];
                            matrix[k][l] = temp;
                            ones_needed--;
                            if (ones_needed == 0) break;
                        }
                    }
                    if (ones_needed == 0) break;
                }
            }
        }
    }
    ones_needed = 4;
    for (int i = size - 2; i < size; i++)
    {
        for (int j = size - 2; j < size; j++)
        {
            if (matrix[i][j] == 0)
            {
                for (int k = 2; k < size; k++)
                {
                    for (int l = 2; l < size; l++)
                    {
                        if (matrix[k][l] == 1)
                        {
                            int temp = matrix[i][j];
                            matrix[i][j] = matrix[k][l];
                            matrix[k][l] = temp;
                            ones_needed--;
                            if (ones_needed == 0) break;
                        }
                    }
                    if (ones_needed == 0) break;
                }
            }
        }
    }
    return matrix;
}

void print_matrix(int** matrix, int size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void save_matrix_to_file(int** matrix, int size, const char* filename)
{
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        puts("Ошибка открытия файла для записи");
        return;
    }
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            fprintf(file, "%d ", matrix[i][j]);
        }
        fprintf(file, "\n");
    }
    fclose(file);
}

int** load_matrix_from_file(int size, const char* filename)
{
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        puts("Ошибка открытия файла для чтения");
        return NULL;
    }
    int** matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (int*)malloc(size * sizeof(int));
        for (int j = 0; j < size; j++) {
            fscanf(file, "%d", &matrix[i][j]);
        }
    }
    fclose(file);
    return matrix;
}

void bubble_sort(int* row, int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (row[j] > row[j + 1]) {
                int temp = row[j];
                row[j] = row[j + 1];
                row[j + 1] = temp;
            }
        }
    }
}
