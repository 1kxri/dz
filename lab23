#define _CRT_SECURE_NO_WARNINGS 

#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#ifndef _LIST_H
#define _LIST_H

struct listitem {
    int number;
    char name[80];
    struct listitem* next;
};

typedef struct listitem* List;

void initlist(List*); /* инициализация списка пустым содержимым */
void insertfront_number(List*, int val); /* вставка в список перед узлом со значением поля number=val */
void insertback_number(List*, int val); /* вставка в список перед узлом со значением поля number=val */
void insertfront_str(List*, char* str); /* вставка в список перед узлом со значением str в поле name */
void insertback_str(List*, char* str); /* вставка в список перед узлом со значением str в поле name */
bool isempty(List*); /* проверяет, является ли список пустым */
int length(List); /* определение длины списка */
void destroyItem(List*, struct listitem* node); /* удаление заданного узла node из списка */
List getitem_number(List, int n); /* нахождение узла со значением n в поле number */
List getitem_str(List, char* str); /* нахождение узла со значением str в поле name */
#endif /* _LIST_H */

/* инициализация списка пустым содержимым */
void initlist(List* list) {
    *list = NULL;
}

/* вставка в список перед узлом со значением поля number=val */
void insertfront_number(List* list, int val) {
    List newItem = (List)malloc(sizeof(struct listitem));
    newItem->number = val;
    newItem->next = *list;
    *list = newItem;
}

/* вставка в список перед узлом со значением поля number=val */
void insertback_number(List* list, int val) {
    List newItem = (List)malloc(sizeof(struct listitem));
    newItem->number = val;
    newItem->next = NULL;

    if (*list == NULL) {
        *list = newItem; 
    }
    else {
        List cursor = *list;
        while (cursor->next != NULL) {
            cursor = cursor->next; 
        }
        cursor->next = newItem; 
    }
}

/* вставка в список перед узлом со значением str в поле name */
void insertfront_str(List* list, char* str) {
    List newItem = (List)malloc(sizeof(struct listitem));
    strcpy(newItem->name, str);
    newItem->next = *list;
    *list = newItem;
}

/* вставка в список перед узлом со значением str в поле name */
void insertback_str(List* list, char* str) {
    List newItem = (List)malloc(sizeof(struct listitem));
    strcpy(newItem->name, str);
    newItem->next = NULL;

    if (*list == NULL) {
        *list = newItem; 
    }
    else {
        List cursor = *list;
        while (cursor->next != NULL) {
            cursor = cursor->next; 
        }
        cursor->next = newItem; 
    }
}

/* проверяет, является ли список пустым */
bool isempty(List* list) {
    return *list == NULL; 
}

/* определение длины списка */
int length(List list) {
    int count = 0;
    List cursor = list;
    while (cursor != NULL) {
        count++;
        cursor = cursor->next; 
    }
    return count;
}

/* удаление заданного узла node из списка */
void destroyItem(List* list, struct listitem* node) {
    if (*list == NULL || node == NULL) return;

    if (*list == node) {
        *list = node->next; 
    }
    else {
        List cursor = *list;
        while (cursor->next != NULL && cursor->next != node) {
            cursor = cursor->next; 
        }
        if (cursor->next == node) {
            cursor->next = node->next; 
        }
    }
    free(node); 
}

/* нахождение узла со значением n в поле number */
List getitem_number(List list, int n) {
    while (list != NULL) {
        if (list->number == n) {
            return list;
        }
        list = list->next;
    }
    return NULL;
}

/* нахождение узла со значением str в поле name */
List getitem_str(List list, char* str) {
    while (list != NULL) {
        if (strcmp(list->name, str) == 0) {
            return list;
        }
        list = list->next;
    }
    return NULL;
}

/* вывод на печать всех эдементов списка */
void printList(List list) {
    while (list != NULL) {
        printf("%d ", list->number);
        list = list->next;
    }
    printf("\n");
}

/* удаление первого элмемнта */
void deleteFirst(List* list) {
    if (isempty(list)) {
        printf("Список пуст, удаление невозможно.\n");
        return;
    }
    List temp = *list; 
    *list = (*list)->next; 
    free(temp); 
}

/* удаления последенего элемента */
void deleteLast(List* list) {
    if (isempty(list)) {
        printf("Список пуст, удаление невозможно.\n");
        return;
    }
    if ((*list)->next == NULL) { 
        free(*list); 
        *list = NULL; 
        return;
    }
    List cursor = *list;
    while (cursor->next->next != NULL) {
        cursor = cursor->next;
    }
    free(cursor->next);
    cursor->next = NULL;
}

int main() {
    setlocale(LC_CTYPE, "RUS");
    List myList;
    initlist(&myList);

    printf("Введите 11 целых чисел:\n");
    for (int i = 0; i < 11; i++) {
        int value;
        scanf("%d", &value);
        insertback_number(&myList, value);
    }

    printf("Исходный список: ");
    printList(myList);
    deleteFirst(&myList);
    deleteLast(&myList);
    printf("Список после удаления первого и последнего элементов: ");
    printList(myList);

    return 0;
}
