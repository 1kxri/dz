#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>
#include <math.h> 
#include <conio.h>

double* full_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        double x = i + 1;
        ptr_array[i] = pow(x, 2) + 2 * M_PI * cos(M_PI * x);
    }
    return ptr_array;
}

void put_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        printf("\n a[%d] = %f", i, ptr_array[i]);
    }
    printf("\n");
}

void calc_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        ptr_array[i] = ceil(ptr_array[i]);
    }
}

void rand_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        ptr_array[i] = ((double)rand() / RAND_MAX) * 2.0 - 1;
    }
}

int delete_k(double* ptr_array, int size, double k)
{
    int n = 0; 
    for (int i = 0; i < size; i++)
    {
        if (ptr_array[i] > k)
        {
            ptr_array[n] = ptr_array[i];
            n++;
        }
    }
    return n; 
}

double* insert(double* ptr_array, int* size, int index, double num)
{
    *size += 1;
    ptr_array = (double*)realloc(ptr_array, (*size) * sizeof(double));
    for (int i = *size - 1; i > index; i--)
    {
        ptr_array[i] = ptr_array[i - 1];
    }
    ptr_array[index] = num;
    return ptr_array;
}

int index_otric_chisla(double* ptr_array, int size) 
{
    int posl_index = -1; 
    for (int i = 0; i < size; i++) 
    {
        if (ptr_array[i] < 0) 
        {
            posl_index = i;
        }
    }
    posl_index = posl_index + 1;
    return posl_index;
}

int main()
{
    setlocale(LC_ALL, "RUS");
    double* ptr_array;
    double k;
    int size, index;
    printf("Введите размер массива:");
    scanf("%d", &size);
    ptr_array = (double*)malloc(size * sizeof(double));
    if (ptr_array == NULL)
    {
        puts("error");
        return -1;
    }
    full_elements(ptr_array, size); 
    printf("Массив:");
    put_elements(ptr_array, size);

    calc_elements(ptr_array, size);
    printf("\nНовый массив:");
    put_elements(ptr_array, size);

    rand_elements(ptr_array, size);
    printf("\nМассив, заполненный числами от -1 до 1 рандомно:");
    put_elements(ptr_array, size);

    printf("\nВведите значение А:");
    scanf("%lf", &k); 
    printf("\nНовый массив:");
    size = delete_k(ptr_array, size, k);
    put_elements(ptr_array, size);

    printf("\nВставка -999 после последнего отрицательного в массив:");
    index = index_otric_chisla(ptr_array, size);
    ptr_array = insert(ptr_array, &size, index, -999);
    put_elements(ptr_array, size);
    free(ptr_array);
}
