#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_WARNINGS
#define MAXSIZE 100
#define M_PI 3.14

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>
#include <conio.h>

double* full_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        double x = i + 1;
        ptr_array[i] = pow(x, 2) + 2 * M_PI * cos(M_PI * x);
    }
    return ptr_array;
}

double put_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        printf("\n a[%d] = %f", i, ptr_array[i]);
    }
    printf("\n");
}

void calc_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        ptr_array[i] = ceil(ptr_array[i]);
    }
}

void rand_elements(double* ptr_array, int size)
{
    for (int i = 0; i < size; i++)
    {
        ptr_array[i] = ((double)rand() / RAND_MAX) * 2.0 - 1, 0;
    }
}

int delete_k(double* ptr_array, int size, double k)
{
    int n = 0;
    for (int i = 0; i < size; i++)
    {
        if (ptr_array[i] <= k)
        {
            ptr_array[n] = ptr_array[i];
            n++;
        }
    }
    return n;
}

int* insert(int* ptr_array, int* size, int index, int num)
{
    int size_n = (*size) + 1;
    if (ptr_array == NULL) return NULL;
    int* ptr_array_n = (int*)realloc(ptr_array, size_n * sizeof(int));
    if (ptr_array == NULL) return ptr_array;
    ptr_array = ptr_array_n;
    for (int i = size_n - 1; i > index; i--)
        ptr_array[i] = ptr_array[i - 1];
    ptr_array[index] = num;
    *size = size_n;
    return ptr_array;
}

int main()
{
    setlocale(LC_ALL, "RUS");
    double* ptr_array, arr[MAXSIZE], k;
    int size, index, num;
    printf("Введите размер массива:");
    scanf("%d", &size);
    ptr_array = (double*)malloc(size * sizeof(double));
    if (ptr_array == NULL)
    {
        puts("error");
        return -1;
    }
    full_elements(arr, size);
    printf("Массив:");
    put_elements(arr, size);
    calc_elements(arr, size);
    printf("\nНовый массив:");
    put_elements(arr, size);
    rand_elements(arr, size);
    printf("\nМассив, заполненный числами от -1 до 1 рандомно:");
    put_elements(arr, size);
    printf("\nВведите значение А:");
    scanf("%d", &k);
    printf("\nНовый массив:");
    size = delete_k(arr, size, k);
    put_elements(arr, size);
    printf("\nВведите инедкс числа:");
    scanf("%d", &index);
    printf("Введите число которое нужно вставить:");
    scanf("%d", &num);
    insert(arr, size, index, num);

    printf("\nНовый массив:");
    put_elements(arr, size);
    free(ptr_array);
}
